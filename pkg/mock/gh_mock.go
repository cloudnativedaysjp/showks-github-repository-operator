// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/gh/gh.go

// Package mock_gh is a generated GoMock package.
package mock_gh

import (
	v1beta1 "github.com/cloudnativedaysjp/showks-github-repository-operator/pkg/apis/showks/v1beta1"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockGitHubClientInterface is a mock of GitHubClientInterface interface
type MockGitHubClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientInterfaceMockRecorder
}

// MockGitHubClientInterfaceMockRecorder is the mock recorder for MockGitHubClientInterface
type MockGitHubClientInterfaceMockRecorder struct {
	mock *MockGitHubClientInterface
}

// NewMockGitHubClientInterface creates a new mock instance
func NewMockGitHubClientInterface(ctrl *gomock.Controller) *MockGitHubClientInterface {
	mock := &MockGitHubClientInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubClientInterface) EXPECT() *MockGitHubClientInterfaceMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method
func (m *MockGitHubClientInterface) CreateRepository(org string, repo *github.Repository) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockGitHubClientInterfaceMockRecorder) CreateRepository(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockGitHubClientInterface)(nil).CreateRepository), org, repo)
}

// DeleteRepository mocks base method
func (m *MockGitHubClientInterface) DeleteRepository(org, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", org, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository
func (mr *MockGitHubClientInterfaceMockRecorder) DeleteRepository(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockGitHubClientInterface)(nil).DeleteRepository), org, repo)
}

// GetRepository mocks base method
func (m *MockGitHubClientInterface) GetRepository(org, repo string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockGitHubClientInterfaceMockRecorder) GetRepository(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitHubClientInterface)(nil).GetRepository), org, repo)
}

// InitializeRepository mocks base method
func (m *MockGitHubClientInterface) InitializeRepository(rs v1beta1.GitHubRepositorySpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeRepository", rs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeRepository indicates an expected call of InitializeRepository
func (mr *MockGitHubClientInterfaceMockRecorder) InitializeRepository(rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeRepository", reflect.TypeOf((*MockGitHubClientInterface)(nil).InitializeRepository), rs)
}

// AddCollaborator mocks base method
func (m *MockGitHubClientInterface) AddCollaborator(owner, repo, user, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", owner, repo, user, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollaborator indicates an expected call of AddCollaborator
func (mr *MockGitHubClientInterfaceMockRecorder) AddCollaborator(owner, repo, user, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockGitHubClientInterface)(nil).AddCollaborator), owner, repo, user, permission)
}

// GetPermissionLevel mocks base method
func (m *MockGitHubClientInterface) GetPermissionLevel(owner, repo, user string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionLevel", owner, repo, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionLevel indicates an expected call of GetPermissionLevel
func (mr *MockGitHubClientInterfaceMockRecorder) GetPermissionLevel(owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionLevel", reflect.TypeOf((*MockGitHubClientInterface)(nil).GetPermissionLevel), owner, repo, user)
}

// UpdateBranchProtection mocks base method
func (m *MockGitHubClientInterface) UpdateBranchProtection(owner, repo, branch string, request *github.ProtectionRequest) (*github.Protection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", owner, repo, branch, request)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection
func (mr *MockGitHubClientInterfaceMockRecorder) UpdateBranchProtection(owner, repo, branch, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockGitHubClientInterface)(nil).UpdateBranchProtection), owner, repo, branch, request)
}

// ListHook mocks base method
func (m *MockGitHubClientInterface) ListHook(owner, repo string) ([]*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHook", owner, repo)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHook indicates an expected call of ListHook
func (mr *MockGitHubClientInterfaceMockRecorder) ListHook(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHook", reflect.TypeOf((*MockGitHubClientInterface)(nil).ListHook), owner, repo)
}

// CreateHook mocks base method
func (m *MockGitHubClientInterface) CreateHook(owner, repo string, hook *github.Hook) (*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", owner, repo, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHook indicates an expected call of CreateHook
func (mr *MockGitHubClientInterfaceMockRecorder) CreateHook(owner, repo, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockGitHubClientInterface)(nil).CreateHook), owner, repo, hook)
}

// UpdateHook mocks base method
func (m *MockGitHubClientInterface) UpdateHook(owner, repo string, id int64, hook *github.Hook) (*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHook", owner, repo, id, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHook indicates an expected call of UpdateHook
func (mr *MockGitHubClientInterfaceMockRecorder) UpdateHook(owner, repo, id, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockGitHubClientInterface)(nil).UpdateHook), owner, repo, id, hook)
}

// DeleteHook mocks base method
func (m *MockGitHubClientInterface) DeleteHook(owner, repo string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", owner, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHook indicates an expected call of DeleteHook
func (mr *MockGitHubClientInterfaceMockRecorder) DeleteHook(owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockGitHubClientInterface)(nil).DeleteHook), owner, repo, id)
}

// GetUser mocks base method
func (m *MockGitHubClientInterface) GetUser(user string) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockGitHubClientInterfaceMockRecorder) GetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGitHubClientInterface)(nil).GetUser), user)
}
